========================================
휴게소 방향 필터링 알고리즘 분석 보고서
========================================

작성일: 2025-08-09
분석 대상: HygePick 프로젝트 vs Reference(RestSpotFinder) 프로젝트

========================================
1. Reference 서비스 알고리즘 분석
========================================

## 핵심 구조 (Java/Spring Boot)
- RestAreaServiceImpl.java: 메인 서비스 로직
- InterchangeService.java: 방향성 판단 서비스
- RestArea.java: 휴게소 엔티티
- Direction.java: 방향 열거형 (UP, DOWN, BOTH, UNKNOWN)

## 알고리즘 작동 방식

### 1단계: 인근 휴게소 조회
- 경로(LineString)로부터 500m 반경 내 휴게소 검색
- PostGIS의 공간 쿼리 활용

### 2단계: 인터체인지 기반 방향 판단
```java
// InterchangeService.getDirectionByRoute() 메서드
1. 각 휴게소의 routeName(도로명) 추출
2. 해당 도로의 인근 인터체인지(IC) 2개 검색
3. 시작 IC와 끝 IC의 weight 비교
4. weight 차이로 방향 결정:
   - 시작 weight > 끝 weight = 상행(UP)
   - 시작 weight < 끝 weight = 하행(DOWN)
```

### 3단계: 접근 가능성 판단
```java
// RestArea.isAccessible() 메서드
public boolean isAccessible(Direction routeDirection) {
    return routeDirection != null &&
        (routeDirection == Direction.UNKNOWN ||  // 방향 모를때
         this.routeDirection.equals(routeDirection.getLabel()) ||  // 같은 방향
         this.routeDirection.equals("양방향"));  // 양방향 휴게소
}
```

## 핵심 특징
1. **인터체인지 Weight 기반**: IC의 가중치로 상행/하행 판단
2. **도로별 독립 판단**: 각 도로(routeName)마다 별도 방향 계산
3. **데이터베이스 의존**: routeDirection 필드가 DB에 저장됨
4. **엄격한 필터링**: 방향이 일치하지 않으면 완전 제외

========================================
2. 현재 우리 서비스 알고리즘 분석
========================================

## 핵심 구조 (TypeScript/Next.js)
- directionBasedFilter.ts: 방향성 기반 필터링
- universalDirectionFilter.ts: 범용 방향 필터
- routeRestAreaService.ts: 메인 서비스

## 알고리즘 작동 방식

### 방법 1: directionBasedFilter
1. **경로 세그먼트화**: 경로를 작은 구간으로 분할
2. **다중 신호 분석**:
   - 휴게소명 패턴 (예: "휴게소명(부산)")
   - direction 필드 분석
   - 고속도로 패턴 매칭
   - 지리적 위치 분석
3. **신뢰도 기반 판단**: 0~1 점수로 필터링

### 방법 2: universalDirectionFilter  
1. **벡터 기반 분석**: 시작점→끝점 직선 벡터 계산
2. **목적지명 추출**: 괄호 안 도시명으로 방향 판단
3. **베어링 차이 계산**: 경로와 휴게소 각도 차이

## 문제점 식별

### 주요 문제
1. **하드코딩된 방향 판단**
   - "서울방향", "부산방향" 등 특정 키워드에 의존
   - 전국 모든 경로에 대응 불가

2. **벡터 기반의 한계**
   - 직선 거리 기반 → 실제 도로 곡선 미반영
   - 고속도로 분기점, 교차로 처리 미흡

3. **DB 정보 부재**
   - Reference처럼 routeDirection 필드 없음
   - 인터체인지 weight 정보 없음

4. **방향 판단 부정확**
   - 서울→부산 경로에서 "(서울)" 휴게소를 반대방향으로 잘못 판단
   - 실제로는 양방향 휴게소거나 접근 가능한 경우가 많음

========================================
3. 근본적 차이점
========================================

| 항목 | Reference (Java) | 우리 서비스 (TypeScript) |
|------|-----------------|------------------------|
| 방향 판단 | IC weight 기반 | 휴게소명/벡터 기반 |
| DB 의존도 | 높음 (routeDirection 저장) | 낮음 (API 데이터만) |
| 정확도 | 높음 (IC 데이터 활용) | 중간 (휴게소명 패턴) |
| 유연성 | 낮음 (DB 업데이트 필요) | 높음 (실시간 계산) |
| 처리 속도 | 빠름 (DB 쿼리) | 느림 (복잡한 계산) |

========================================
4. 해결 방안 제안
========================================

## 단기 해결책 (즉시 적용 가능)

### 1. 방향 필터링 완화
```typescript
// routeRestAreaService.ts 수정
matching: {
  enableDirectionFilter: false,  // 일시적으로 비활성화
  // 또는
  directionConfidenceThreshold: 0.3,  // 임계값 낮추기
  includeAmbiguousDirection: true     // 애매한 경우도 포함
}
```

### 2. 휴게소명 패턴 개선
- "(서울)", "(부산)" 같은 괄호 패턴을 무시
- 양방향 휴게소 키워드 추가 ("양방향", "상하행", "통합")

### 3. 거리 기반 필터링 강화
- 경로로부터 멀리 떨어진 휴게소만 제외
- 방향성은 참고만 하고 거리 우선

## 중기 해결책 (1-2주)

### 1. 인터체인지 데이터 구축
```typescript
interface Interchange {
  id: string;
  name: string;
  routeName: string;
  weight: number;  // 순서/가중치
  coordinates: Coordinates;
}
```

### 2. Reference 알고리즘 포팅
- Java 코드의 방향 판단 로직을 TypeScript로 이식
- IC weight 기반 방향 판단 구현

### 3. DB 스키마 확장
```sql
ALTER TABLE rest_areas ADD COLUMN route_direction VARCHAR(10);
-- 'UP', 'DOWN', 'BOTH' 값 저장
```

## 장기 해결책 (1개월+)

### 1. ML 기반 방향 예측
- 과거 사용자 경로 데이터 학습
- 휴게소 접근 패턴 분석

### 2. 실시간 교통 데이터 연동
- 실제 차량 이동 방향 파악
- 동적 방향성 판단

### 3. 크라우드소싱
- 사용자 피드백으로 방향 정보 수집
- 커뮤니티 기반 데이터 개선

========================================
5. 즉시 적용 가능한 코드 수정안
========================================

## Option 1: 방향 필터 비활성화
파일: src/lib/routeRestAreaService.ts
```typescript
// 58-67 라인 수정
matching: {
  maxDistance: 5,
  highwayOnly: true,
  minInterval: 15,
  maxResults: 20,
  enableDirectionFilter: false,  // false로 변경
}
```

## Option 2: 신뢰도 임계값 낮추기
```typescript
matching: {
  enableDirectionFilter: true,
  directionStrictMode: false,  // false로 변경
  directionConfidenceThreshold: 0.4,  // 0.8 → 0.4
  includeAmbiguousDirection: true  // true로 변경
}
```

## Option 3: 양방향 휴게소 우선 처리
파일: src/lib/routing/directionBasedFilter.ts
```typescript
// 208-214 라인 수정
private analyzeDirectionField() {
  // 양방향 키워드 우선 체크
  if (direction.includes('양방향') || 
      direction.includes('상하행') || 
      direction.includes('통합')) {
    return { match: true, confidence: 1.0, isOpposite: false };
  }
  // 기존 로직...
}
```

========================================
6. 결론 및 권장사항
========================================

## 현재 상황
- Reference는 DB 기반 + IC weight로 정확한 방향 판단
- 우리는 휴게소명 패턴 + 벡터 분석으로 추정
- 서울↔부산 같은 주요 경로에서 오탐 발생

## 권장 조치
1. **즉시**: 방향 필터 완화 또는 비활성화
2. **1주 내**: 양방향 휴게소 처리 로직 추가
3. **2주 내**: IC 데이터 수집 및 적용
4. **1개월 내**: Reference 알고리즘 완전 이식

## 핵심 교훈
- 방향성 판단은 도로 인프라 데이터가 필수
- 휴게소명만으로는 한계가 명확
- DB 의존도와 정확도는 트레이드오프 관계

========================================
작성자: Claude Code Assistant
분석 완료: 2025-08-09
========================================